# Load the Tidyverse Library
library(tidyverse)
# Read the Data in from the CSV File
dataOnCovid = read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
# View the Data
dataOnCovid %>% View()
# Pull-in Second CSV File for Data
## Input the directory of wherever this is stored; must use absolute PATH for R
worldBankData = read_csv("/home/kyle/Documents/School/spring2024/cpsc375/Final_Proj/world-bank-pop.csv")
# View Data from other table
worldBankData %>% View()
# Filter out the Data Columns that are NOT countries
dataOnCovid <- dataOnCovid %>% filter(nchar(iso_code) == 3)
worldBankData <- worldBankData %>% filter((nchar(worldBankData$`Country Code`) == 3))
#Tidy the Data from worldBankData so the Data Displays Correctly on a "full_join()" when joinging the two tables together
worldBankData %>% View()
worldBankDataTidied <- worldBankData %>% mutate(`2023 [YR2023]` = as.numeric(`2023 [YR2023]`)) %>% select(-`Series Name`) %>% pivot_wider(id_cols=c(`Country Name`, `Country Code`),names_from=`Series Code`,values_from=`2023 [YR2023]`)
# Drop Countries whose population is less than 1 million
worldBankDataTidied <- worldBankDataTidied %>% filter(worldBankDataTidied$SP.POP.TOTL > 1e6)
worldBankDataTidied %>% View()
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# DEBUG: Check to see if Values are Cleared Properly
completeDataTable %>% View()
# Join the Data into one Table on Country Code
completeDataTable <- full_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# DEBUG: Check to see if Values are Cleared Properly
completeDataTable %>% View()
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# Join the Data into one Table on Country Code
completeDataTable <- full_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# DEBUG: Check to see if Values are Cleared Properly
completeDataTable %>% View()
# Create Column tp Predict Deaths 2wks Ahead
completeDataTable <- completeDataTable %>% filter(date >= as.Date("2023-01-01"))
completeDataTable <- completeDataTable %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14)) %>% group_by("iso_code")
# View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% View()
# View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("iso_code") %>% View()
# Join the Data into one Table on Country Code
completeDataTable <- inner_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Join the Data into one Table on Country Code
completeDataTable <- full_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Join the Data into one Table on Country Code
completeDataTable <- full_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Join the Data into one Table on Country Code
completeDataTable <- inner_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
completeDataTable %>% View()
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# Join the Data into one Table on Country Code
completeDataTable <- inner_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# Create Column tp Predict Deaths 2wks Ahead
completeDataTable <- completeDataTable %>% filter(date >= as.Date("2023-01-01"))
completeDataTable <- completeDataTable %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14))
# View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("iso_code") %>% View()
# Drop the old_deaths_smoothed_column
completeDataTable <- completeDataTable %>% select(-new_deaths_smoothed)
# View Cleaned Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, sort(names(.))) %>% View()
# Join the Data into one Table on Country Code
completeDataTable <- full_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
completeDataTable %>% View()
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# DEBUG: Check to see if Values are Cleared Properly
completeDataTable %>% View()
# Create Column tp Predict Deaths 2wks Ahead
completeDataTable <- completeDataTable %>% filter(date >= as.Date("2023-01-01"))
completeDataTable <- completeDataTable %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14))
# View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("iso_code") %>% View()
# Drop the old_deaths_smoothed_column
completeDataTable <- completeDataTable %>% select(-new_deaths_smoothed)
# View Cleaned Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, sort(names(.))) %>% View()
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# View Cleaned Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, sort(names(.))) %>% View()
# Join the Data into one Table on Country Code
completeDataTable <- full_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code"))
, "location"="Country Na
# Join the Data into one Table on Country Code
completeDataTable <- full_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Join the Data into one Table on Country Code
completeDataTable <- full_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code"))
worldBankDataTidied %>% View()
# View Data from other table
worldBankData %>% View()
# View the Data
dataOnCovid %>% View()
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code"))
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# Create Column tp Predict Deaths 2wks Ahead
completeDataTable <- completeDataTable %>% filter(date >= as.Date("2023-01-01"))
completeDataTable <- completeDataTable %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14))
# View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("iso_code") %>% View()
# Drop the old_deaths_smoothed_column
completeDataTable <- completeDataTable %>% select(-new_deaths_smoothed)
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# DEBUG: View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("iso_code") %>% View()
# DEBUG: View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("iso_code") %>% View()
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code"))
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# Create Column tp Predict Deaths 2wks Ahead
completeDataTable <- completeDataTable %>% filter(date >= as.Date("2023-01-01"))
completeDataTable <- completeDataTable %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14))
# DEBUG: View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("iso_code") %>% View()
# DEBUG: View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("iso_code") %>% View()
# DEBUG: View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("location") %>% View()
# DEBUG: View the Completed Data Table
completeDataTable <- completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("location")
%>% View()
# Drop Countries whose population is less than 1 million
worldBankDataTidied <- worldBankDataTidied %>% filter(worldBankDataTidied$SP.POP.TOTL > 1e6)
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code"))
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# Create Column tp Predict Deaths 2wks Ahead
completeDataTable <- completeDataTable %>% filter(date >= as.Date("2023-01-01"))
completeDataTable <- completeDataTable %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14))
# DEBUG: View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("location") %>% View()
# Drop the old_deaths_smoothed_column
completeDataTable <- completeDataTable %>% select(-new_deaths_smoothed)
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code"))
# Create Column tp Predict Deaths 2wks Ahead
completeDataTable <- completeDataTable %>% filter(date >= as.Date("2023-01-01"))
completeDataTable <- completeDataTable %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14))
# DEBUG: View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("location") %>% View()
# Drop the old_deaths_smoothed_column
completeDataTable <- completeDataTable %>% select(-new_deaths_smoothed)
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# View Cleaned Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, sort(names(.))) %>% View()
# DEBUG: View the Completed Data Table
completeDataTable <- completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("iso_code")
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code"))
# Create Column tp Predict Deaths 2wks Ahead
completeDataTable <- completeDataTable %>% filter(date >= as.Date("2023-01-01"))
completeDataTable <- completeDataTable %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14))
# DEBUG: View the Completed Data Table
completeDataTable <- completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("iso_code")
# Drop the old_deaths_smoothed_column
completeDataTable <- completeDataTable %>% select(-new_deaths_smoothed)
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# View Cleaned Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, sort(names(.))) %>% View()
View(completeDataTable)
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Create Column tp Predict Deaths 2wks Ahead
completeDataTable <- completeDataTable %>% filter(date >= as.Date("2023-01-01"))
completeDataTable <- completeDataTable %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14))
# DEBUG: View the Completed Data Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.))) %>% group_by("iso_code")
# Drop the old_deaths_smoothed_column
completeDataTable <- completeDataTable %>% select(-new_deaths_smoothed)
# Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# View Cleaned Table
completeDataTable %>% select(iso_code, continent, location, date, new_deaths_smoothed_2wk, sort(names(.))) %>% View()
# Load the Tidyverse Library
library(tidyverse)
# Read the Data in from the CSV File
dataOnCovid = read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
# Pull-in Second CSV File for Data
## Input the directory of wherever this is stored; must use absolute PATH for R
worldBankData = read_csv("/home/kyle/Documents/School/spring2024/cpsc375/Final_Proj/world-bank-pop.csv")
# Filter out the Data Columns that are NOT countries
dataOnCovid <- dataOnCovid %>% filter(nchar(iso_code) == 3)
worldBankData <- worldBankData %>% filter((nchar(worldBankData$`Country Code`) == 3))
#Tidy the Data from worldBankData so the Data Displays Correctly on a "full_join()" when joinging the two tables together
# worldBankData %>% View()
worldBankDataTidied <- worldBankData %>% mutate(`2023 [YR2023]` = as.numeric(`2023 [YR2023]`)) %>% select(-`Series Name`) %>% pivot_wider(id_cols=c(`Country Name`, `Country Code`),names_from=`Series Code`,values_from=`2023 [YR2023]`)
# Read the Data in from the CSV File
dataOnCovid = read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
# Pull-in Second CSV File for Data
## Input the directory of wherever this is stored; must use absolute PATH for R
worldBankData = read_csv("/home/kyle/Documents/School/spring2024/cpsc375/Final_Proj/world-bank-pop.csv")
# Pull-in Second CSV File for Data
## Input the directory of wherever this is stored; must use absolute PATH for R
worldBankData = read_csv("/home/kyle/Documents/School/spring2024/cpsc375/Final_Proj/world-bank-pop.csv")
# Read the Data in from the CSV File
dataOnCovid = read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
source("~/Documents/School/spring2024/cpsc375/Final_Proj/final_proj.R", echo=TRUE)
worldBankData <- worldBankData %>% filter((nchar(worldBankData$`Country Code`) == 3))
#Tidy the Data from worldBankData so the Data Displays Correctly on a "full_join()" when joinging the two tables together
# worldBankData %>% View()
worldBankDataTidied <- worldBankData %>% mutate(`2023 [YR2023]` = as.numeric(`2023 [YR2023]`)) %>% select(-`Series Name`) %>% pivot_wider(id_cols=c(`Country Name`, `Country Code`),names_from=`Series Code`,values_from=`2023 [YR2023]`)
# Drop Countries whose population is less than 1 million
worldBankDataTidied <- worldBankDataTidied %>% filter(worldBankDataTidied$SP.POP.TOTL > 1e6)
# Create Column tp Predict Deaths 2wks Ahead
dataOnCovid <- dataOnCovid%>% filter(date >= as.Date("2023-01-01"))
dataOnCovid <- dataOnCovid %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14))
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Drop the old_deaths_smoothed_column & Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(-continent)
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# View Cleaned Table
completeDataTable <- completeDataTable %>% select(iso_code, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.)))
# STEP 2: Linear Modeling
# Make a List of All Predictor Variables
predictorVariableList <- completeDataTable %>% select(sort(names(.)))
predictorVariableList <- predictorVariableList %>% select(-iso_code, -location, -date, -new_deaths_smoothed_2wk)
predictorVariableList %>% View()
# Generate Transformed Variables
predictorVariableList <- predictorVariableList %>% mutate(SP.POP.65UP.TOTL=(SP.POP.6569.MA + SP.POP.6569.FE + SP.POP.7074.MA + SP.POP.7074.FE + SP.POP.7579.MA + SP.POP.7579.FE + SP.POP.80UP.MA + SP.POP.80UP.FE))
predictorVariableList <- predictorVariableList %>% mutate(mortality_rate=(new_deaths/SP.POP.TOTL))
predictorVariableList <- predictorVariableList %>% mutate(case_fatality_rate= total_deaths/total_cases)
predictorVariableList %>% View()
# STEP 2: Linear Modeling
# Make a List of All Predictor Variables
predictorVariableList <- completeDataTable %>% select(iso_code, location, date,sort(names(.)))
predictorVariableList <- predictorVariableList %>% select(-iso_code, -location, -date, -new_deaths_smoothed_2wk)
# STEP 2: Linear Modeling
# Make a List of All Predictor Variables
predictorVariableList <- completeDataTable %>% select(iso_code, location, date,sort(names(.)))
predictorVariableList <- predictorVariableList %>% select(-iso_code, -location, -date, -new_deaths_smoothed_2wk)
predictorVariableList %>% View()
# Load the Tidyverse Library
library(tidyverse)
# Read the Data in from the CSV File
dataOnCovid = read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
# Pull-in Second CSV File for Data
## Input the directory of wherever this is stored; must use absolute PATH for R
worldBankData = read_csv("/home/kyle/Documents/School/spring2024/cpsc375/Final_Proj/world-bank-pop.csv")
# Filter out the Data Columns that are NOT countries
dataOnCovid <- dataOnCovid %>% filter(nchar(iso_code) == 3)
worldBankData <- worldBankData %>% filter((nchar(worldBankData$`Country Code`) == 3))
#Tidy the Data from worldBankData so the Data Displays Correctly on a "full_join()" when joinging the two tables together
# worldBankData %>% View()
worldBankDataTidied <- worldBankData %>% mutate(`2023 [YR2023]` = as.numeric(`2023 [YR2023]`)) %>% select(-`Series Name`) %>% pivot_wider(id_cols=c(`Country Name`, `Country Code`),names_from=`Series Code`,values_from=`2023 [YR2023]`)
# Drop Countries whose population is less than 1 million
worldBankDataTidied <- worldBankDataTidied %>% filter(worldBankDataTidied$SP.POP.TOTL > 1e6)
# Create Column tp Predict Deaths 2wks Ahead
dataOnCovid <- dataOnCovid%>% filter(date >= as.Date("2023-01-01"))
dataOnCovid <- dataOnCovid %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14))
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Drop the old_deaths_smoothed_column & Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(-continent)
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# View Cleaned Table
completeDataTable <- completeDataTable %>% select(iso_code, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.)))
# STEP 2: Linear Modeling
# Make a List of All Predictor Variables
predictorVariableList <- completeDataTable %>% select(iso_code, location, date,sort(names(.)))
predictorVariableList <- predictorVariableList %>% select(-iso_code, -location, -date, -new_deaths_smoothed_2wk)
predictorVariableList %>% View()
# STEP 2: Linear Modeling
# Make a List of All Predictor Variables
predictorVariableList <- completeDataTable %>% select(sort(names(.)))
predictorVariableList <- predictorVariableList %>% select(-new_deaths_smoothed_2wk)
predictorVariableList %>% View()
help(mutate)\
help(mutate)
View(worldBankData)
View(worldBankDataTidied)
View(worldBankData)
predictorVariableList %>% View()
predictorVariableList %>% select(location, iso_code, date, sort(names(.)))
predictorVariableList %>% select(location, iso_code, date, sort(names(.))) %>% View()
# Load the Tidyverse Library
library(tidyverse)
# Read the Data in from the CSV File
dataOnCovid = read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
# Pull-in Second CSV File for Data
## Input the directory of wherever this is stored; must use absolute PATH for R
worldBankData = read_csv("/home/kyle/Documents/School/spring2024/cpsc375/Final_Proj/world-bank-pop.csv")
# Filter out the Data Columns that are NOT countries
dataOnCovid <- dataOnCovid %>% filter(nchar(iso_code) == 3)
worldBankData <- worldBankData %>% filter((nchar(worldBankData$`Country Code`) == 3))
#Tidy the Data from worldBankData so the Data Displays Correctly on a "full_join()" when joinging the two tables together
# worldBankData %>% View()
worldBankDataTidied <- worldBankData %>% mutate(`2023 [YR2023]` = as.numeric(`2023 [YR2023]`)) %>% select(-`Series Name`) %>% pivot_wider(id_cols=c(`Country Name`, `Country Code`),names_from=`Series Code`,values_from=`2023 [YR2023]`)
# Drop Countries whose population is less than 1 million
worldBankDataTidied <- worldBankDataTidied %>% filter(worldBankDataTidied$SP.POP.TOTL > 1e6)
# Create Column tp Predict Deaths 2wks Ahead
dataOnCovid <- dataOnCovid%>% filter(date >= as.Date("2023-01-01"))
dataOnCovid <- dataOnCovid %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14))
# Join the Data into one Table on Country Code
completeDataTable <- left_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Drop the old_deaths_smoothed_column & Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(-continent)
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# View Cleaned Table
completeDataTable <- completeDataTable %>% select(iso_code, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.)))
# STEP 2: Linear Modeling
# Make a List of All Predictor Variables
predictorVariableList <- completeDataTable %>% select(sort(names(.)))
predictorVariableList <- predictorVariableList %>% select(-new_deaths_smoothed_2wk, -location)
predictorVariableList %>% View()
# Generate Transformed Variables
predictorVariableList <- predictorVariableList %>% mutate(SP.POP.65UP.TOTL=(SP.POP.6569.MA + SP.POP.6569.FE + SP.POP.7074.MA + SP.POP.7074.FE + SP.POP.7579.MA + SP.POP.7579.FE + SP.POP.80UP.MA + SP.POP.80UP.FE))
predictorVariableList <- predictorVariableList %>% mutate(mortality_rate=(new_deaths/SP.POP.TOTL))
predictorVariableList <- predictorVariableList %>% mutate(case_fatality_rate= total_deaths/total_cases)
predictorVariableList %>% select(iso_code, date, sort(names(.))) %>% View()
completeDataTable %>% View()
# Load the Tidyverse Library
library(tidyverse)
# Read the Data in from the CSV File
dataOnCovid = read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
# Pull-in Second CSV File for Data
## Input the directory of wherever this is stored; must use absolute PATH for R
worldBankData = read_csv("/home/kyle/Documents/School/spring2024/cpsc375/Final_Proj/world-bank-pop.csv")
#Tidy the Data from worldBankData so the Data Displays Correctly on a "full_join()" when joinging the two tables together
# worldBankData %>% View()
worldBankDataTidied <- worldBankData %>% mutate(`2023 [YR2023]` = as.numeric(`2023 [YR2023]`)) %>% select(-`Series Name`) %>% pivot_wider(id_cols=c(`Country Name`, `Country Code`),names_from=`Series Code`,values_from=`2023 [YR2023]`)
# Drop Countries whose population is less than 1 million
worldBankDataTidied <- worldBankDataTidied %>% filter(worldBankDataTidied$SP.POP.TOTL > 1e6)
# Create Column tp Predict Deaths 2wks Ahead
dataOnCovid <- dataOnCovid%>% filter(date >= as.Date("2023-01-01"))
dataOnCovid <- dataOnCovid %>% mutate(date = date - 14, new_deaths_smoothed_2wk=new_deaths_smoothed, new_deaths_smoothed=lag(new_deaths_smoothed,14))
# Join the Data into one Table on Country Code
completeDataTable <- inner_join(dataOnCovid, worldBankDataTidied, by=c("iso_code"="Country Code", "location"="Country Name"))
# Filter out the Data Columns that are NOT countries
completeDataTable <- completeDataTable %>% filter(nchar(iso_code) == 3)
# Drop the old_deaths_smoothed_column & Drop NA Columns from completeDataTable
completeDataTable <- completeDataTable %>% select(-continent)
completeDataTable <- completeDataTable %>% select(where(~ any(!is.na(.))))
# View Cleaned Table
completeDataTable <- completeDataTable %>% select(iso_code, location, date, new_deaths_smoothed_2wk, new_deaths_smoothed, sort(names(.)))
completeDataTable %>% View()
# Generate Transformed Variables
completedDataTable <- completeDataTable %>% mutate(SP.POP.65UP.TOTL=(SP.POP.6569.MA + SP.POP.6569.FE + SP.POP.7074.MA + SP.POP.7074.FE + SP.POP.7579.MA + SP.POP.7579.FE + SP.POP.80UP.MA + SP.POP.80UP.FE))
